{
  "Resources": {
    "DocumentBucketAE41E5A9": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "lambda-async-dev-documents"
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "InfraStack/DocumentBucket/Resource"
      }
    },
    "SuccessHandlerServiceRoleEBF509F1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/SuccessHandler/ServiceRole/Resource"
      }
    },
    "SuccessHandlerServiceRoleDefaultPolicy668974D4": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DocumentBucketAE41E5A9",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DocumentBucketAE41E5A9",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "SuccessHandlerServiceRoleDefaultPolicy668974D4",
        "Roles": [
          {
            "Ref": "SuccessHandlerServiceRoleEBF509F1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/SuccessHandler/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "SuccessHandlerC6894287": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "58e7a7e0d13dc496cc950cfcd15fa2e8d66ae5fbb11e2367e449753c92197460.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "SuccessHandlerServiceRoleEBF509F1",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "S3_BUCKET_NAME": {
              "Ref": "DocumentBucketAE41E5A9"
            }
          }
        },
        "FunctionName": "lambda-async-dev-onsuccess",
        "Handler": "main.handler",
        "Runtime": "python3.8"
      },
      "DependsOn": [
        "SuccessHandlerServiceRoleDefaultPolicy668974D4",
        "SuccessHandlerServiceRoleEBF509F1"
      ],
      "Metadata": {
        "aws:cdk:path": "InfraStack/SuccessHandler/Resource",
        "aws:asset:path": "asset.58e7a7e0d13dc496cc950cfcd15fa2e8d66ae5fbb11e2367e449753c92197460",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "LambdaAsyncFunctionServiceRole483E3DFA": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/LambdaAsyncFunction/ServiceRole/Resource"
      }
    },
    "LambdaAsyncFunctionServiceRoleDefaultPolicy94F5C363": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":events:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":event-bus/default"
                  ]
                ]
              }
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SuccessHandlerC6894287",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "LambdaAsyncFunctionServiceRoleDefaultPolicy94F5C363",
        "Roles": [
          {
            "Ref": "LambdaAsyncFunctionServiceRole483E3DFA"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/LambdaAsyncFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "LambdaAsyncFunction053941E6": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "6191129d6c8a45337b9f007850bf855780466334903a0d0d09251a25770ee9a9.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaAsyncFunctionServiceRole483E3DFA",
            "Arn"
          ]
        },
        "FunctionName": "lambda-async-dev",
        "Handler": "async_handler.handler",
        "Runtime": "python3.8",
        "Timeout": 900
      },
      "DependsOn": [
        "LambdaAsyncFunctionServiceRoleDefaultPolicy94F5C363",
        "LambdaAsyncFunctionServiceRole483E3DFA"
      ],
      "Metadata": {
        "aws:cdk:path": "InfraStack/LambdaAsyncFunction/Resource",
        "aws:asset:path": "asset.6191129d6c8a45337b9f007850bf855780466334903a0d0d09251a25770ee9a9",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "EventInvokeLambdaFailure184DB469": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventPattern": {
          "detail-type": [
            "Lambda Function Invocation Result - Failure"
          ],
          "resources": [
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::GetAtt": [
                      "LambdaAsyncFunction053941E6",
                      "Arn"
                    ]
                  },
                  ":$LATEST"
                ]
              ]
            }
          ],
          "source": [
            "lambda"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SuccessHandlerC6894287",
                "Arn"
              ]
            },
            "Id": "Target0",
            "InputPath": "$.detail.responsePayload"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/EventInvokeLambda/Failure/Resource"
      }
    },
    "EventInvokeLambdaFailureAllowEventRuleInfraStackSuccessHandler98726F76FF45F115": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SuccessHandlerC6894287",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventInvokeLambdaFailure184DB469",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/EventInvokeLambda/Failure/AllowEventRuleInfraStackSuccessHandler98726F76"
      }
    },
    "EventInvokeLambdaSuccessDFFBC020": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventPattern": {
          "detail-type": [
            "Lambda Function Invocation Result - Success"
          ],
          "resources": [
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::GetAtt": [
                      "LambdaAsyncFunction053941E6",
                      "Arn"
                    ]
                  },
                  ":$LATEST"
                ]
              ]
            }
          ],
          "source": [
            "lambda"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SuccessHandlerC6894287",
                "Arn"
              ]
            },
            "Id": "Target0",
            "InputPath": "$.detail.responsePayload"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/EventInvokeLambda/Success/Resource"
      }
    },
    "EventInvokeLambdaSuccessAllowEventRuleInfraStackSuccessHandler98726F76CA0B07AB": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SuccessHandlerC6894287",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EventInvokeLambdaSuccessDFFBC020",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/EventInvokeLambda/Success/AllowEventRuleInfraStackSuccessHandler98726F76"
      }
    },
    "EventInvokeLambdaF6BABD8C": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaAsyncFunction053941E6"
        },
        "Qualifier": "$LATEST",
        "DestinationConfig": {
          "OnFailure": {
            "Destination": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":events:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":event-bus/default"
                ]
              ]
            }
          },
          "OnSuccess": {
            "Destination": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":events:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":event-bus/default"
                ]
              ]
            }
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/EventInvokeLambda/Resource"
      }
    },
    "lambdaapi40841C60": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "lambda-async-dev_api"
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Resource"
      }
    },
    "lambdaapiCloudWatchRole0459F11F": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/CloudWatchRole/Resource"
      }
    },
    "lambdaapiAccount4AC64745": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "lambdaapiCloudWatchRole0459F11F",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "lambdaapi40841C60"
      ],
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Account"
      }
    },
    "lambdaapiDeployment77E502E604880aefa518e6d1c2819ef5cab3b153": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "lambdaapi40841C60"
        },
        "Description": "Automatically created by the RestApi construct"
      },
      "DependsOn": [
        "lambdaapiGET9D9FCC74",
        "lambdaapiOPTIONSEAF9D8D1",
        "lambdaapiPOST285EA2A6"
      ],
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Deployment/Resource"
      }
    },
    "lambdaapiDeploymentStageapistageasync8DACFEB6": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "RestApiId": {
          "Ref": "lambdaapi40841C60"
        },
        "DeploymentId": {
          "Ref": "lambdaapiDeployment77E502E604880aefa518e6d1c2819ef5cab3b153"
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
            "ThrottlingBurstLimit": 100,
            "ThrottlingRateLimit": 10
          }
        ],
        "StageName": "api_stage_async"
      },
      "DependsOn": [
        "lambdaapiAccount4AC64745"
      ],
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/DeploymentStage.api_stage_async/Resource"
      }
    },
    "lambdaapiOPTIONSEAF9D8D1": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "OPTIONS",
        "ResourceId": {
          "Fn::GetAtt": [
            "lambdaapi40841C60",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "lambdaapi40841C60"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              },
              "StatusCode": "204"
            }
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }"
          },
          "Type": "MOCK"
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "StatusCode": "204"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/OPTIONS/Resource"
      }
    },
    "lambdaapiPOSTApiPermissionInfraStacklambdaapiD64DE791POST442DCA8F": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaAsyncFunction053941E6",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "lambdaapi40841C60"
              },
              "/",
              {
                "Ref": "lambdaapiDeploymentStageapistageasync8DACFEB6"
              },
              "/POST/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/POST/ApiPermission.InfraStacklambdaapiD64DE791.POST.."
      }
    },
    "lambdaapiPOSTApiPermissionTestInfraStacklambdaapiD64DE791POSTD2F5BB1E": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaAsyncFunction053941E6",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "lambdaapi40841C60"
              },
              "/test-invoke-stage/POST/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/POST/ApiPermission.Test.InfraStacklambdaapiD64DE791.POST.."
      }
    },
    "lambdaapiPOST285EA2A6": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "ResourceId": {
          "Fn::GetAtt": [
            "lambdaapi40841C60",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "lambdaapi40841C60"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseParameters": {},
              "ResponseTemplates": {
                "application/json": "{\n        \"api_stage\": \"$context.stage\",\n        \"api_request_id\": \"$context.requestId\",\n        \"api_resource_path\": \"$context.resourcePath\",\n        \"http_method\": \"$context.httpMethod\",\n        \"source_ip\": \"$context.identity.sourceIp\",\n        \"user-agent\": \"$context.identity.userAgent\",\n        #foreach($param in $input.params().header.keySet())\n        #if($param == \"invocationtype\" or $param == \"InvocationType\" && $util.escapeJavaScript($input.params().header.get($param)) == \"Event\")\n        #set($is_async = \"true\")\n        #end\n        #end\n        #if($is_async == \"true\")\n        \"asynchronous_invocation\":\"true\",\n        \"message\":\"Event received. Check queue/logs for status\"\n        #else\n        \"synchronous_invocation\":\"true\",\n        #end\n        }\n        "
              },
              "StatusCode": "200"
            }
          ],
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "RequestParameters": {
            "integration.request.header.X-Amz-Invocation-Type": "method.request.path.InvocationType"
          },
          "RequestTemplates": {
            "application/json": "{ \"statusCode\": \"200\"}"
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaAsyncFunction053941E6",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Content-Length": true
            },
            "StatusCode": "200"
          }
        ],
        "RequestParameters": {
          "method.request.header.InvocationType": true
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/POST/Resource"
      }
    },
    "lambdaapiGETApiPermissionInfraStacklambdaapiD64DE791GET52709212": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaAsyncFunction053941E6",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "lambdaapi40841C60"
              },
              "/",
              {
                "Ref": "lambdaapiDeploymentStageapistageasync8DACFEB6"
              },
              "/GET/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/GET/ApiPermission.InfraStacklambdaapiD64DE791.GET.."
      }
    },
    "lambdaapiGETApiPermissionTestInfraStacklambdaapiD64DE791GET7FCCEA2E": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaAsyncFunction053941E6",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "lambdaapi40841C60"
              },
              "/test-invoke-stage/GET/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/GET/ApiPermission.Test.InfraStacklambdaapiD64DE791.GET.."
      }
    },
    "lambdaapiGET9D9FCC74": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "ResourceId": {
          "Fn::GetAtt": [
            "lambdaapi40841C60",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "lambdaapi40841C60"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseParameters": {},
              "ResponseTemplates": {
                "application/json": "{\n        \"api_stage\": \"$context.stage\",\n        \"api_request_id\": \"$context.requestId\",\n        \"api_resource_path\": \"$context.resourcePath\",\n        \"http_method\": \"$context.httpMethod\",\n        \"source_ip\": \"$context.identity.sourceIp\",\n        \"user-agent\": \"$context.identity.userAgent\",\n        #foreach($param in $input.params().header.keySet())\n        #if($param == \"invocationtype\" or $param == \"InvocationType\" && $util.escapeJavaScript($input.params().header.get($param)) == \"Event\")\n        #set($is_async = \"true\")\n        #end\n        #end\n        #if($is_async == \"true\")\n        \"asynchronous_invocation\":\"true\",\n        \"message\":\"Event received. Check queue/logs for status\"\n        #else\n        \"synchronous_invocation\":\"true\",\n        #end\n        }\n        "
              },
              "StatusCode": "200"
            }
          ],
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "RequestParameters": {
            "integration.request.header.X-Amz-Invocation-Type": "method.request.path.InvocationType"
          },
          "RequestTemplates": {
            "application/json": "{ \"statusCode\": \"200\"}"
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaAsyncFunction053941E6",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "RequestParameters": {
          "method.request.header.InvocationType": true
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/GET/Resource"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/2VQ0W6DMAz8lr6HbC2atFfabdIepqHuA6o0uNQDEoSTVgjl3xcHxCbt6S6+88X2Tm6f5ONG3SnTVZO1eJbTl1O6EbF0miiX097rBpw4XMzCZtgrgiBa1Z0rJac3b7RDa9i28tcbGPdubraBgzUXrFktYeiQaPH+swSBqpPT0bbAesLStqjH1JxYEJSfFBE4kgWDAI6h2OaXtohBqB5r5eCuxqgAuaLHJP7SQmvrjRMv0Ld27GIIV/+84i3qlDiT2Gr9oIGXFx/grrZicWYhiDQNW9HUq5kdn9713i2/r9W4coV8qiDKMUaYh1w+y+1u802I2RAnww7kccYf1a/iDqsBAAA="
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/CDKMetadata/Default"
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Outputs": {
    "lambdaapiEndpoint08EEC087": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "lambdaapi40841C60"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/",
            {
              "Ref": "lambdaapiDeploymentStageapistageasync8DACFEB6"
            },
            "/"
          ]
        ]
      }
    }
  },
  "Conditions": {
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "af-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            }
          ]
        }
      ]
    }
  },
  "Parameters": {
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}