{
  "Resources": {
    "LambdaAsyncFunctionServiceRole483E3DFA": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/LambdaAsyncFunction/ServiceRole/Resource"
      }
    },
    "LambdaAsyncFunction053941E6": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "586db366550c0794a6a73fb343b2ad71d4168fa82506bd5da863bbc41a006df7.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaAsyncFunctionServiceRole483E3DFA",
            "Arn"
          ]
        },
        "FunctionName": "lambda-async-dev",
        "Handler": "async_handler.handler",
        "Runtime": "python3.8"
      },
      "DependsOn": [
        "LambdaAsyncFunctionServiceRole483E3DFA"
      ],
      "Metadata": {
        "aws:cdk:path": "InfraStack/LambdaAsyncFunction/Resource",
        "aws:asset:path": "asset.586db366550c0794a6a73fb343b2ad71d4168fa82506bd5da863bbc41a006df7",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "lambdaapi40841C60": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "lambda-async-dev_api"
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Resource"
      }
    },
    "lambdaapiCloudWatchRole0459F11F": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/CloudWatchRole/Resource"
      }
    },
    "lambdaapiAccount4AC64745": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "lambdaapiCloudWatchRole0459F11F",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "lambdaapi40841C60"
      ],
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Account"
      }
    },
    "lambdaapiDeployment77E502E607c98a0e277d73f63a078b2722cede8a": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "lambdaapi40841C60"
        },
        "Description": "Automatically created by the RestApi construct"
      },
      "DependsOn": [
        "lambdaapiGET9D9FCC74",
        "lambdaapiOPTIONSEAF9D8D1",
        "lambdaapiPOST285EA2A6"
      ],
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Deployment/Resource"
      }
    },
    "lambdaapiDeploymentStageprod611C80ED": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "RestApiId": {
          "Ref": "lambdaapi40841C60"
        },
        "DeploymentId": {
          "Ref": "lambdaapiDeployment77E502E607c98a0e277d73f63a078b2722cede8a"
        },
        "StageName": "prod"
      },
      "DependsOn": [
        "lambdaapiAccount4AC64745"
      ],
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/DeploymentStage.prod/Resource"
      }
    },
    "lambdaapiOPTIONSEAF9D8D1": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "OPTIONS",
        "ResourceId": {
          "Fn::GetAtt": [
            "lambdaapi40841C60",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "lambdaapi40841C60"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              },
              "StatusCode": "204"
            }
          ],
          "RequestTemplates": {
            "application/json": "{ statusCode: 200 }"
          },
          "Type": "MOCK"
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "StatusCode": "204"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/OPTIONS/Resource"
      }
    },
    "lambdaapiPOSTApiPermissionInfraStacklambdaapiD64DE791POST442DCA8F": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaAsyncFunction053941E6",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "lambdaapi40841C60"
              },
              "/",
              {
                "Ref": "lambdaapiDeploymentStageprod611C80ED"
              },
              "/POST/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/POST/ApiPermission.InfraStacklambdaapiD64DE791.POST.."
      }
    },
    "lambdaapiPOSTApiPermissionTestInfraStacklambdaapiD64DE791POSTD2F5BB1E": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaAsyncFunction053941E6",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "lambdaapi40841C60"
              },
              "/test-invoke-stage/POST/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/POST/ApiPermission.Test.InfraStacklambdaapiD64DE791.POST.."
      }
    },
    "lambdaapiPOST285EA2A6": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "ResourceId": {
          "Fn::GetAtt": [
            "lambdaapi40841C60",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "lambdaapi40841C60"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{ \"statusCode\": \"200\"}"
          },
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaAsyncFunction053941E6",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/POST/Resource"
      }
    },
    "lambdaapiGETApiPermissionInfraStacklambdaapiD64DE791GET52709212": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaAsyncFunction053941E6",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "lambdaapi40841C60"
              },
              "/",
              {
                "Ref": "lambdaapiDeploymentStageprod611C80ED"
              },
              "/GET/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/GET/ApiPermission.InfraStacklambdaapiD64DE791.GET.."
      }
    },
    "lambdaapiGETApiPermissionTestInfraStacklambdaapiD64DE791GET7FCCEA2E": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaAsyncFunction053941E6",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "lambdaapi40841C60"
              },
              "/test-invoke-stage/GET/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/GET/ApiPermission.Test.InfraStacklambdaapiD64DE791.GET.."
      }
    },
    "lambdaapiGET9D9FCC74": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "ResourceId": {
          "Fn::GetAtt": [
            "lambdaapi40841C60",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "lambdaapi40841C60"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{ \"statusCode\": \"200\"}"
          },
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaAsyncFunction053941E6",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/lambda_api/Default/GET/Resource"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/01P0WrDMAz8lr472toy2Gvasbex0n1AcR0tUxPbIZIpIeTfJzuD9enudD7pvIPtCzxv7J0r13RVT1eYv8S6zujoMvfWXxsL83sKTigGc/wOj/yEoydmVYsh62E+xx6zkXExvL9YZhSGOoNqOCTXoRwso7EDtVbwbifNIUs9UIn+09q5mIKYNxz6OHlUqtMHpVXbcm8lGo1pdFjWf6D8xCabK1sWU1rkpxTabHwmGZL8HS3JzI8xNCTlT6dJk+FpD6+w3W1uTFSNWog8wnnFX6M9FpFBAQAA"
      },
      "Metadata": {
        "aws:cdk:path": "InfraStack/CDKMetadata/Default"
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Outputs": {
    "lambdaapiEndpoint08EEC087": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "lambdaapi40841C60"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/",
            {
              "Ref": "lambdaapiDeploymentStageprod611C80ED"
            },
            "/"
          ]
        ]
      }
    }
  },
  "Conditions": {
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "af-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            }
          ]
        }
      ]
    }
  },
  "Parameters": {
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}